buildscript {
    apply from: "version.gradle"
    apply plugin: 'java'

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://repo.spring.io/libs-snapshot" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootPluginVersion")
        classpath("org.springframework.cloud:spring-cloud-contract-gradle-plugin:$springCloudContractPluginVersion")
        classpath("io.spring.gradle:dependency-management-plugin:$springDependencyManagementVersion")
        classpath("net.ltgt.gradle:gradle-errorprone-plugin:$errorpronPluginVersion")
        classpath("com.commercehub.gradle.plugin:gradle-avro-plugin:$avroPluginVersion")
    }

    compileJava {options.encoding = "UTF-8"}
    compileTestJava {options.encoding = "UTF-8"}
}

configure(allprojects) { project ->
    group 'com.stu.demo'
    apply from: "$rootDir/version.gradle"

    repositories {

        mavenLocal()
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
}

// event project only contains specification of message so don't need to include in code verification tool
configure(subprojects - project(':event')) { subProject ->

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'groovy'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'net.ltgt.errorprone'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: 'jacoco'
    apply plugin: 'project-report'
    apply plugin: 'maven-publish'
    
    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-contract-dependencies:${springCloudContractVersion}"
        }
    }

    compileJava {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
        options.encoding = 'UTF-8'
    }

    compileJava.options*.compilerArgs = [
        "-Xlint:serial", "-Xlint:varargs", "-Xlint:cast", "-Xlint:classfile",
        "-Xlint:dep-ann", "-Xlint:divzero", "-Xlint:empty", "-Xlint:finally",
        "-Xlint:overrides", "-Xlint:-path", "-Xlint:processing", "-Xlint:static",
        "-Xlint:try", "-Xlint:fallthrough", "-Xlint:rawtypes", "-Xlint:deprecation",
        "-Xlint:unchecked", "-Xlint:-options", "-Werror"
    ]

    compileTestJava.options*.compilerArgs = [
        "-Xlint:serial", "-Xlint:-varargs", "-Xlint:cast", "-Xlint:classfile",
        "-Xlint:dep-ann", "-Xlint:divzero", "-Xlint:empty", "-Xlint:finally",
        "-Xlint:overrides", "-Xlint:-path", "-Xlint:processing", "-Xlint:static",
        "-Xlint:try", "-Xlint:-fallthrough", "-Xlint:-rawtypes", "-Xlint:-deprecation",
        "-Xlint:-unchecked", "-Xlint:-options"
    ]

    checkstyle {
        toolVersion = '7.1.1'
        configFile = "$rootDir/codequality/checkstyle/checkstyle.xml" as File
        sourceSets = [sourceSets.main]
    }

    configurations {
        errorprone.resolutionStrategy.force 'com.google.errorprone:error_prone_core:2.0.13'
    }

    tasks.withType(Pmd) {
        ruleSetFiles = files("$rootDir/codequality/pmd/ruleset.xml")
        source = fileTree('src/main/java') + fileTree('src/main/test')
    }

}
